{"version":3,"sources":["store/ducks/chatApp/slice.js","store/ducks/chatApp/selector.js","app/containers/ChatApp/userChatWindow.js","app/containers/ChatApp/users.js","app/containers/ChatApp/index.js","routes.js","app/index.js","reportWebVitals.js","api/variables.js","store/ducks/chatApp/saga.js","store/ducks/index.js","store/index.js","index.js"],"names":["initialState","users","posts","selectedUser","getUsers","createAction","getUserPosts","addUserPost","usersSlice","createSlice","name","reducers","setUsers","state","action","payload","setSelectedUser","setUserPosts","reset","reducer","actions","selectUsers","createSelector","UserChatWindow","dispatch","useDispatch","useSelector","useState","message","setMessage","addMessagesToDom","msg","ulEle","animationDelay","scrollbarDelay","li","document","createElement","style","setAttribute","innerHTML","title","appendChild","setTimeout","scrollTop","clientHeight","loadMessages","useCallback","messagesListEle","getElementById","forEach","i","index","length","useEffect","userId","id","Object","keys","WelcomeText","UserChatWindowDiv","className","rows","value","onChange","e","target","onClick","body","data","styled","div","UserList","isAddUserOpen","setIsAddUserOpen","formData","setFormData","handleChange","event","onSubmit","UserListDiv","Button","map","user","username","selectedUserEle","parentElement","children","sib","classList","remove","add","onItemSelect","src","alt","centered","isOpen","toggle","ModalHeader","method","htmlFor","Input","type","ChatApp","RootDiv","ChatScreen","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","apiEndpoints","fetchUsers","fetchPosts","UploadUserPost","usersSaga","call","fetch","response","json","put","select","JSON","stringify","headers","all","takeLatest","rootSaga","rootReducer","combineReducers","userReducer","fork","logger","createLogger","collapsed","duration","store","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run","configureAppStore","ConnectedApp","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.69f704ae.chunk.js","sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  users: [],\n  posts: [],\n  selectedUser: {},\n};\n\nconst getUsers = createAction(\"users/getUsers\");\nconst getUserPosts = createAction(\"users/getPosts\");\nconst addUserPost = createAction(\"users/addPosts\");\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    setUsers(state, action) {\n      state.users = action.payload;\n    },\n    setSelectedUser(state, action) {\n      state.selectedUser = action.payload;\n    },\n    setUserPosts(state, action) {\n      state.posts = action.payload;\n    },\n    reset(state, action) {\n      state.users = [];\n      state.posts = [];\n      state.selectedUser = {};\n    },\n  },\n});\n\nexport { getUsers, getUserPosts, addUserPost };\n\nexport const { reducer, actions } = usersSlice;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { initialState } from \"./slice\";\n\nconst selectDomain = (state) => state.users || initialState;\n\nexport const selectUsers = createSelector([selectDomain], (users) => users);\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { selectUsers } from \"../../../store/ducks/chatApp/selector\";\nimport { addUserPost } from \"../../../store/ducks/chatApp/slice\";\n\nfunction UserChatWindow() {\n  const dispatch = useDispatch();\n  const { selectedUser, posts } = useSelector(selectUsers);\n\n  const [message, setMessage] = useState();\n\n  const addMessagesToDom = (\n    msg,\n    ulEle,\n    animationDelay = 0.1,\n    scrollbarDelay = 500\n  ) => {\n    const li = document.createElement(\"li\");\n    li.style.animationDelay = `${animationDelay}s`;\n    li.setAttribute(\"id\", \"cw-msg-grp\");\n    li.innerHTML = `<img src=\"img/user.png\" />\n          <div id=\"cw-msg\">\n            ${msg?.title}\n          </div>`;\n    ulEle?.appendChild(li);\n    setTimeout(() => {\n      ulEle.scrollTop = ulEle.clientHeight;\n    }, scrollbarDelay);\n  };\n\n  const loadMessages = useCallback(() => {\n    const messagesListEle = document.getElementById(`cw-messages`);\n    if (message !== \"\") {\n      messagesListEle.innerHTML = \"\";\n      posts.forEach((msg, i) => {\n        addMessagesToDom(msg, messagesListEle, 0.1 * i);\n      });\n    } else {\n      const index = posts.length - 1;\n      addMessagesToDom(posts[index], messagesListEle, 0.1, 120);\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [posts]);\n\n  useEffect(() => {\n    if (posts[0]?.userId === selectedUser?.id) posts?.length && loadMessages();\n    else setMessage(null);\n  }, [selectedUser, posts, loadMessages]);\n\n  const sendMessage = () => {\n    const payload = {\n      title: message,\n      body: message,\n      userId: selectedUser.id,\n    };\n    dispatch(addUserPost({ data: payload }));\n    setMessage(\"\");\n  };\n  return Object.keys(selectedUser)?.length === 0 ? (\n    <WelcomeText>\n      <div>\n        <h3>Welcome User!</h3>\n        <h4>Please select a user to see his messages</h4>\n      </div>\n    </WelcomeText>\n  ) : (\n    <UserChatWindowDiv>\n      <div id=\"cw-heading\">\n        <h4>Chat Messages</h4>\n      </div>\n      <div id=\"cw-content\">\n        <ul id=\"cw-messages\" className=\"custom-scrollbar\"></ul>\n        <div id=\"cw-input-box\">\n          <p>New message</p>\n          <div id=\"cw-text\">\n            <textarea\n              className=\"custom-scrollbar\"\n              rows=\"3\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            />\n            <button onClick={sendMessage}>\n              <span>\n                Send\n                <i className=\"fas fa-paper-plane\" />\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </UserChatWindowDiv>\n  );\n}\n\nexport default UserChatWindow;\n\nconst WelcomeText = styled.div`\n  width: 70%;\n  color: #103195;\n  background: #f5f7fac7;\n  border-top-right-radius: 10px;\n  position: relative;\n  div {\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    position: absolute;\n  }\n`;\n\nconst UserChatWindowDiv = styled.div`\n  width: 70%;\n  color: #103195;\n  background: #f5f7fac7;\n  border-top-right-radius: 10px;\n\n  #cw-heading {\n    color: white;\n    padding: 20px;\n    background-image: linear-gradient(\n      -145deg,\n      #091379,\n      #00dcff 50%,\n      #091379 100%\n    );\n    border-top-right-radius: inherit;\n  }\n  #cw-messages {\n    height: calc(80vh - 200px);\n    overflow-y: auto;\n    li {\n      opacity: 0;\n      animation: fadeIn 0.1s;\n      animation-fill-mode: forwards;\n    }\n  }\n  @keyframes fadeIn {\n    0% {\n      opacity: 1;\n      margin-left: -100px;\n    }\n    25% {\n      opacity: 1;\n      margin-left: -75px;\n    }\n    50% {\n      opacity: 1;\n      margin-left: -50px;\n    }\n    75% {\n      opacity: 1;\n      margin-left: -25px;\n    }\n    100% {\n      opacity: 1;\n      margin-left: 0px;\n    }\n  }\n  #cw-msg-grp {\n    display: flex;\n    align-items: center;\n    padding: 0 20px;\n\n    img {\n      margin-right: 5px;\n    }\n    #cw-msg {\n      margin: 10px;\n      border-radius: 25px;\n      background-image: linear-gradient(to right, #87dcbd 50%, #88dc90 100%);\n      padding: 10px 15px;\n    }\n  }\n  #cw-text {\n    display: flex;\n    align-items: center;\n    button {\n      padding: 5px 15px;\n      border-radius: 20px;\n      margin-left: 5px;\n      border: 2px solid #103195;\n      color: #103195;\n      outline: none;\n      cursor: pointer;\n      span {\n        display: inline-flex;\n      }\n      i {\n        margin-left: 5px;\n      }\n    }\n  }\n  #cw-input-box {\n    bottom: 0;\n    height: 120px;\n    width: 70%;\n    padding: 0 20px;\n    position: absolute;\n    p {\n      position: relative;\n      :after {\n        content: \"\";\n        width: calc(100% - 102px);\n        height: 2px;\n        background: #103195;\n        right: 0;\n        top: 50%;\n        position: absolute;\n      }\n    }\n    textarea {\n      border: 0px;\n      padding: 0px;\n      resize: none;\n      outline: none;\n      box-shadow: none;\n      width: 100%;\n      height: 50px;\n      z-index: 1;\n      font-size: 16px;\n      background-color: transparent;\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Modal, ModalHeader, ModalBody, Input } from \"reactstrap\";\nimport styled from \"styled-components/macro\";\nimport { selectUsers } from \"../../../store/ducks/chatApp/selector\";\nimport {\n  actions,\n  getUserPosts,\n  getUsers,\n} from \"../../../store/ducks/chatApp/slice\";\n\nfunction UserList() {\n  const dispatch = useDispatch();\n  const { users, selectedUser } = useSelector(selectUsers);\n\n  const [isAddUserOpen, setIsAddUserOpen] = useState(false);\n  const [formData, setFormData] = useState();\n\n  useEffect(() => {\n    //Fetching the users list\n    dispatch(getUsers());\n    return () => {\n      // Reset Store state on unmount\n      dispatch(actions.reset());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    //Fetching selected user's post\n    if (Object.keys(selectedUser)?.length) dispatch(getUserPosts());\n  }, [dispatch, selectedUser]);\n\n  const onItemSelect = ({ id, username }) => {\n    // add active class to selected item and remove it on sibilings\n    const selectedUserEle = document.getElementById(`${username}_${id}`);\n    [...selectedUserEle.parentElement.children].forEach((sib) =>\n      sib.classList.remove(\"listActive\")\n    );\n    selectedUserEle.classList.add(\"listActive\");\n  };\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const onSubmit = () => {\n    // Using store state to add users as post users call is not in https://jsonplaceholder.typicode.com/\n    dispatch(\n      actions.setUsers([...users, { id: users.length - 1, ...formData }])\n    );\n    setIsAddUserOpen(false);\n  };\n\n  return (\n    <UserListDiv>\n      <div id=\"user-heading\">\n        <h4>Users</h4>\n        <Button onClick={() => setIsAddUserOpen(true)}>Add user</Button>\n      </div>\n      <ul id=\"usersList\" className=\"custom-scrollbar\">\n        {users?.map((user, i) => {\n          const { id, name, username } = user;\n          return (\n            <li\n              key={`${username}_${i}`}\n              className=\"\"\n              id={`${username}_${id}`}\n              onClick={() => {\n                dispatch(actions.setSelectedUser(user));\n                onItemSelect(user);\n              }}\n            >\n              <img src=\"img/userFilled.png\" alt=\"\" />\n              {name}\n            </li>\n          );\n        })}\n      </ul>\n      {isAddUserOpen && (\n        <Modal\n          css={`\n            .modal-content {\n              width: inherit;\n            }\n            input {\n              margin: 5px 0;\n            }\n          `}\n          centered\n          isOpen={isAddUserOpen}\n          toggle={() => setIsAddUserOpen(false)}\n        >\n          <ModalHeader toggle={() => setIsAddUserOpen(false)}>\n            Add New User\n          </ModalHeader>\n          <ModalBody\n            css={`\n              button {\n                background: #0b9fe5 !important;\n                float: right;\n              }\n            `}\n          >\n            <form action={onSubmit} method=\"post\" id=\"addUser\">\n              <label htmlFor=\"username\">UserName</label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                onChange={handleChange}\n              />\n              <label htmlFor=\"name\">Full Name</label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                onChange={handleChange}\n              />\n              <Button onClick={onSubmit}>Add</Button>\n            </form>\n          </ModalBody>\n        </Modal>\n      )}\n    </UserListDiv>\n  );\n}\n\nexport default UserList;\n\nconst UserListDiv = styled.div`\n  width: 30%;\n  color: #103195;\n  border-right: 1px solid grey;\n  button {\n    background-color: #0b9fe5;\n  }\n\n  #user-heading {\n    padding: 20px;\n    display: flex;\n    justify-content: space-between;\n  }\n  ul {\n    margin: 0;\n    padding: 0 !important;\n    height: calc(80vh - 80px);\n    overflow-y: auto;\n  }\n\n  li {\n    cursor: pointer;\n    padding: 10px 20px;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    :hover {\n      box-shadow: 0 2px 7px -4px rgba(0, 0, 0, 0.5);\n    }\n    img {\n      margin-right: 10px;\n    }\n  }\n  .listActive {\n    background-color: #add8e67d;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport UserChatWindow from \"./userChatWindow\";\nimport UserList from \"./users\";\n\nfunction ChatApp() {\n  return (\n    <RootDiv>\n      <ChatScreen>\n        <UserList />\n        <UserChatWindow />\n      </ChatScreen>\n    </RootDiv>\n  );\n}\n\nexport default ChatApp;\n\nconst RootDiv = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow-y: hidden;\n  background-image: linear-gradient(\n    to bottom left,\n    rgb(21 23 78) 60%,\n    rgb(43 45 170) 100%\n  );\n`;\n\nconst ChatScreen = styled.div`\n  display: flex;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n  width: 80%;\n  height: 80vh;\n  position: absolute;\n  background-color: white;\n  border-radius: 15px;\n  border: 1px solid grey;\n  box-shadow: 0px 0px 40px rgb(0 0 0 / 90%);\n`;\n","import React, { Suspense } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport ChatApp from \"./app/containers/ChatApp\";\n\nfunction Routes() {\n  return (\n    <Suspense>\n      <Switch>\n        {/* Route without auth, basically the default page of application which renders chat application */}\n        <Route exact path=\"/\" component={ChatApp} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport Routes from \"../routes\";\n// Fontawesome vendor import\nimport \"@fortawesome/fontawesome-free/css/regular.css\";\nimport \"@fortawesome/fontawesome-free/css/solid.css\";\nimport \"@fortawesome/fontawesome-free/css/fontawesome.css\";\n// Bootstrap css (Used for Modal in this project)\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  // Introcuding router at the entry of the application\n  return (\n    <HashRouter>\n      <Routes />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const apiEndpoints = {\n  getUsers: `https://jsonplaceholder.typicode.com/users`,\n  getPostsByUserId: (userId) =>\n    `https://jsonplaceholder.typicode.com/users/${userId}/posts`,\n  addPosts: `https://jsonplaceholder.typicode.com/posts`,\n};\n","import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { apiEndpoints } from \"../../../api/variables\";\nimport { actions, addUserPost, getUserPosts, getUsers } from \"./slice\";\n\nfunction* fetchUsers(action) {\n  const response = yield call(() =>\n    fetch(apiEndpoints.getUsers)\n      .then((response) => response.json())\n      .then((json) => json)\n  );\n  yield put(actions.setUsers(response));\n}\n\nfunction* fetchPosts(action) {\n  const {\n    users: { selectedUser },\n  } = yield select();\n  const response = yield call(() =>\n    fetch(apiEndpoints.getPostsByUserId(selectedUser?.id))\n      .then((response) => response.json())\n      .then((json) => json)\n  );\n  yield put(actions.setUserPosts(response));\n}\n\nfunction* UploadUserPost({ payload: { data } }) {\n  const {\n    users: { posts },\n  } = yield select();\n  const response = yield call(() =>\n    fetch(apiEndpoints.addPosts, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => json)\n  );\n  yield put(actions.setUserPosts([...posts, response]));\n}\n\nexport default function* usersSaga() {\n  yield all([\n    yield takeLatest(getUsers, fetchUsers),\n    yield takeLatest(getUserPosts, fetchPosts),\n    yield takeLatest(addUserPost, UploadUserPost),\n  ]);\n}\n","import { combineReducers } from \"redux\";\nimport { all, fork } from \"redux-saga/effects\";\nimport usersSaga from \"./chatApp/saga\";\nimport { reducer as userReducer } from \"./chatApp/slice\";\n\nexport const rootReducer = combineReducers({\n  users: userReducer,\n});\n\nexport function* rootSaga() {\n  yield all([fork(usersSaga)]);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createLogger } from \"redux-logger\";\nimport { rootReducer, rootSaga } from \"./ducks\";\n\nconst logger = createLogger({\n  collapsed: true,\n  duration: true,\n});\nfunction configureAppStore() {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [sagaMiddleware, logger],\n    // devTools: process.env.NODE_ENV !== 'production',\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"./ducks\", () => {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  return { store };\n}\n\nexport const { store } = configureAppStore();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\n// Application with connected store\nconst ConnectedApp = ({ Component }) => (\n  <Provider store={store}>\n    <Component />\n  </Provider>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectedApp Component={App} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}